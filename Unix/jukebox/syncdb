#!/usr/bin/env python2.1
# $Id: syncdb,v 1.1.1.1 2003/03/01 12:55:11 jb Exp $

# Copyright 2002
# 	Jakob Borg <jakob@borg.pp.se>  All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import sys
import time
import commands
import shelve
import os
import re

import database
import mp3

addedf = 0
removedf = 0
addedd = 0
removedd = 0
db = None

def main(argv):
	global addedd, addedf, removedd, removedf, db
	prefs = shelve.open("prefs.db");	
	db = database.Database(prefs["database"])
	print "Syncing database:",
	print "[init:",
	sys.stdout.flush()
	addedd = 0
	addedf = 0
	os.path.walk(prefs["mp3dir"], initDir, None)
	print "+" + str(addedf) + "f +" + str(addedd) + "d]",
	sys.stdout.flush()
	print "[verify:",
	sys.stdout.flush()
	removedd = 0
	removedf = 0
	files = db.getAllFiles()
	for file in files:
		if not os.path.isfile(file["name"]):
			db.removeFile(file["id"])
			removedf += 1
	dirs = db.getAllDirs()
	for dir in dirs:
		if not os.path.isdir(dir):
			db.removeDir(dir)
			removedd += 1
	print "-" + str(removedf) + "f",
	print "-" + str(removedd) + "d]",
	print "[done]"
		
def initDir(arg, dirname, names):
	global addedd, addedf, db
	addedd += db.setDir(dirname)
	for name in names:
		if os.path.islink(dirname + "/" + name):
			os.path.walk(dirname + "/" + name, initDir, None)
		if re.compile("\\.mp[23]$", re.I).search(name):
			info = getInfo(dirname + "/" + name)
			addedf += db.setFile(dirname + "/" + name, info["length"], info["bitrate"])

def getInfo(filename):
	i = {"bitrate":0, "length":0}
	try:
		info = mp3.mp3info(filename)
		i["bitrate"] = info["BITRATE"]
		i["length"] = info["MM"] * 60 + info["SS"]
	finally:
		return i
		
if __name__ == "__main__":
        main(sys.argv)
