//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace PhotoDB {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class PDBDataset : DataSet {
        
        private exifDataTable tableexif;
        
        private folderDataTable tablefolder;
        
        private photoDataTable tablephoto;
        
        private instanceDataTable tableinstance;
        
        private userDataTable tableuser;
        
        private sessionDataTable tablesession;
        
        public PDBDataset() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected PDBDataset(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["exif"] != null)) {
                    this.Tables.Add(new exifDataTable(ds.Tables["exif"]));
                }
                if ((ds.Tables["folder"] != null)) {
                    this.Tables.Add(new folderDataTable(ds.Tables["folder"]));
                }
                if ((ds.Tables["photo"] != null)) {
                    this.Tables.Add(new photoDataTable(ds.Tables["photo"]));
                }
                if ((ds.Tables["instance"] != null)) {
                    this.Tables.Add(new instanceDataTable(ds.Tables["instance"]));
                }
                if ((ds.Tables["user"] != null)) {
                    this.Tables.Add(new userDataTable(ds.Tables["user"]));
                }
                if ((ds.Tables["session"] != null)) {
                    this.Tables.Add(new sessionDataTable(ds.Tables["session"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public exifDataTable exif {
            get {
                return this.tableexif;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public folderDataTable folder {
            get {
                return this.tablefolder;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public photoDataTable photo {
            get {
                return this.tablephoto;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public instanceDataTable instance {
            get {
                return this.tableinstance;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public userDataTable user {
            get {
                return this.tableuser;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sessionDataTable session {
            get {
                return this.tablesession;
            }
        }
        
        public override DataSet Clone() {
            PDBDataset cln = ((PDBDataset)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["exif"] != null)) {
                this.Tables.Add(new exifDataTable(ds.Tables["exif"]));
            }
            if ((ds.Tables["folder"] != null)) {
                this.Tables.Add(new folderDataTable(ds.Tables["folder"]));
            }
            if ((ds.Tables["photo"] != null)) {
                this.Tables.Add(new photoDataTable(ds.Tables["photo"]));
            }
            if ((ds.Tables["instance"] != null)) {
                this.Tables.Add(new instanceDataTable(ds.Tables["instance"]));
            }
            if ((ds.Tables["user"] != null)) {
                this.Tables.Add(new userDataTable(ds.Tables["user"]));
            }
            if ((ds.Tables["session"] != null)) {
                this.Tables.Add(new sessionDataTable(ds.Tables["session"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableexif = ((exifDataTable)(this.Tables["exif"]));
            if ((this.tableexif != null)) {
                this.tableexif.InitVars();
            }
            this.tablefolder = ((folderDataTable)(this.Tables["folder"]));
            if ((this.tablefolder != null)) {
                this.tablefolder.InitVars();
            }
            this.tablephoto = ((photoDataTable)(this.Tables["photo"]));
            if ((this.tablephoto != null)) {
                this.tablephoto.InitVars();
            }
            this.tableinstance = ((instanceDataTable)(this.Tables["instance"]));
            if ((this.tableinstance != null)) {
                this.tableinstance.InitVars();
            }
            this.tableuser = ((userDataTable)(this.Tables["user"]));
            if ((this.tableuser != null)) {
                this.tableuser.InitVars();
            }
            this.tablesession = ((sessionDataTable)(this.Tables["session"]));
            if ((this.tablesession != null)) {
                this.tablesession.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "PDBDataset";
            this.Prefix = "";
            this.Namespace = "http://services.jborg.info/Database.xsd";
            this.Locale = new System.Globalization.CultureInfo("sv-SE");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableexif = new exifDataTable();
            this.Tables.Add(this.tableexif);
            this.tablefolder = new folderDataTable();
            this.Tables.Add(this.tablefolder);
            this.tablephoto = new photoDataTable();
            this.Tables.Add(this.tablephoto);
            this.tableinstance = new instanceDataTable();
            this.Tables.Add(this.tableinstance);
            this.tableuser = new userDataTable();
            this.Tables.Add(this.tableuser);
            this.tablesession = new sessionDataTable();
            this.Tables.Add(this.tablesession);
        }
        
        private bool ShouldSerializeexif() {
            return false;
        }
        
        private bool ShouldSerializefolder() {
            return false;
        }
        
        private bool ShouldSerializephoto() {
            return false;
        }
        
        private bool ShouldSerializeinstance() {
            return false;
        }
        
        private bool ShouldSerializeuser() {
            return false;
        }
        
        private bool ShouldSerializesession() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void exifRowChangeEventHandler(object sender, exifRowChangeEvent e);
        
        public delegate void folderRowChangeEventHandler(object sender, folderRowChangeEvent e);
        
        public delegate void photoRowChangeEventHandler(object sender, photoRowChangeEvent e);
        
        public delegate void instanceRowChangeEventHandler(object sender, instanceRowChangeEvent e);
        
        public delegate void userRowChangeEventHandler(object sender, userRowChangeEvent e);
        
        public delegate void sessionRowChangeEventHandler(object sender, sessionRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class exifDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnexif_id;
            
            private DataColumn columnphoto_id;
            
            private DataColumn columnshutter;
            
            private DataColumn columnaperture;
            
            private DataColumn columncapture_date;
            
            private DataColumn columniso;
            
            private DataColumn columnfocal_length;
            
            private DataColumn columnexpcomp;
            
            internal exifDataTable() : 
                    base("exif") {
                this.InitClass();
            }
            
            internal exifDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn exif_idColumn {
                get {
                    return this.columnexif_id;
                }
            }
            
            internal DataColumn photo_idColumn {
                get {
                    return this.columnphoto_id;
                }
            }
            
            internal DataColumn shutterColumn {
                get {
                    return this.columnshutter;
                }
            }
            
            internal DataColumn apertureColumn {
                get {
                    return this.columnaperture;
                }
            }
            
            internal DataColumn capture_dateColumn {
                get {
                    return this.columncapture_date;
                }
            }
            
            internal DataColumn isoColumn {
                get {
                    return this.columniso;
                }
            }
            
            internal DataColumn focal_lengthColumn {
                get {
                    return this.columnfocal_length;
                }
            }
            
            internal DataColumn expcompColumn {
                get {
                    return this.columnexpcomp;
                }
            }
            
            public exifRow this[int index] {
                get {
                    return ((exifRow)(this.Rows[index]));
                }
            }
            
            public event exifRowChangeEventHandler exifRowChanged;
            
            public event exifRowChangeEventHandler exifRowChanging;
            
            public event exifRowChangeEventHandler exifRowDeleted;
            
            public event exifRowChangeEventHandler exifRowDeleting;
            
            public void AddexifRow(exifRow row) {
                this.Rows.Add(row);
            }
            
            public exifRow AddexifRow(System.Guid exif_id, System.Guid photo_id, System.Double shutter, System.Double aperture, System.DateTime capture_date, int iso, int focal_length, System.Double expcomp) {
                exifRow rowexifRow = ((exifRow)(this.NewRow()));
                rowexifRow.ItemArray = new object[] {
                        exif_id,
                        photo_id,
                        shutter,
                        aperture,
                        capture_date,
                        iso,
                        focal_length,
                        expcomp};
                this.Rows.Add(rowexifRow);
                return rowexifRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                exifDataTable cln = ((exifDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new exifDataTable();
            }
            
            internal void InitVars() {
                this.columnexif_id = this.Columns["exif_id"];
                this.columnphoto_id = this.Columns["photo_id"];
                this.columnshutter = this.Columns["shutter"];
                this.columnaperture = this.Columns["aperture"];
                this.columncapture_date = this.Columns["capture_date"];
                this.columniso = this.Columns["iso"];
                this.columnfocal_length = this.Columns["focal_length"];
                this.columnexpcomp = this.Columns["expcomp"];
            }
            
            private void InitClass() {
                this.columnexif_id = new DataColumn("exif_id", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnexif_id);
                this.columnphoto_id = new DataColumn("photo_id", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnphoto_id);
                this.columnshutter = new DataColumn("shutter", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnshutter);
                this.columnaperture = new DataColumn("aperture", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnaperture);
                this.columncapture_date = new DataColumn("capture_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncapture_date);
                this.columniso = new DataColumn("iso", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columniso);
                this.columnfocal_length = new DataColumn("focal_length", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfocal_length);
                this.columnexpcomp = new DataColumn("expcomp", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnexpcomp);
                this.columnexif_id.AllowDBNull = false;
                this.columnphoto_id.AllowDBNull = false;
            }
            
            public exifRow NewexifRow() {
                return ((exifRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new exifRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(exifRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.exifRowChanged != null)) {
                    this.exifRowChanged(this, new exifRowChangeEvent(((exifRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.exifRowChanging != null)) {
                    this.exifRowChanging(this, new exifRowChangeEvent(((exifRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.exifRowDeleted != null)) {
                    this.exifRowDeleted(this, new exifRowChangeEvent(((exifRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.exifRowDeleting != null)) {
                    this.exifRowDeleting(this, new exifRowChangeEvent(((exifRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveexifRow(exifRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class exifRow : DataRow {
            
            private exifDataTable tableexif;
            
            internal exifRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableexif = ((exifDataTable)(this.Table));
            }
            
            public System.Guid exif_id {
                get {
                    return ((System.Guid)(this[this.tableexif.exif_idColumn]));
                }
                set {
                    this[this.tableexif.exif_idColumn] = value;
                }
            }
            
            public System.Guid photo_id {
                get {
                    return ((System.Guid)(this[this.tableexif.photo_idColumn]));
                }
                set {
                    this[this.tableexif.photo_idColumn] = value;
                }
            }
            
            public System.Double shutter {
                get {
                    try {
                        return ((System.Double)(this[this.tableexif.shutterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableexif.shutterColumn] = value;
                }
            }
            
            public System.Double aperture {
                get {
                    try {
                        return ((System.Double)(this[this.tableexif.apertureColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableexif.apertureColumn] = value;
                }
            }
            
            public System.DateTime capture_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableexif.capture_dateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableexif.capture_dateColumn] = value;
                }
            }
            
            public int iso {
                get {
                    try {
                        return ((int)(this[this.tableexif.isoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableexif.isoColumn] = value;
                }
            }
            
            public int focal_length {
                get {
                    try {
                        return ((int)(this[this.tableexif.focal_lengthColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableexif.focal_lengthColumn] = value;
                }
            }
            
            public System.Double expcomp {
                get {
                    try {
                        return ((System.Double)(this[this.tableexif.expcompColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableexif.expcompColumn] = value;
                }
            }
            
            public bool IsshutterNull() {
                return this.IsNull(this.tableexif.shutterColumn);
            }
            
            public void SetshutterNull() {
                this[this.tableexif.shutterColumn] = System.Convert.DBNull;
            }
            
            public bool IsapertureNull() {
                return this.IsNull(this.tableexif.apertureColumn);
            }
            
            public void SetapertureNull() {
                this[this.tableexif.apertureColumn] = System.Convert.DBNull;
            }
            
            public bool Iscapture_dateNull() {
                return this.IsNull(this.tableexif.capture_dateColumn);
            }
            
            public void Setcapture_dateNull() {
                this[this.tableexif.capture_dateColumn] = System.Convert.DBNull;
            }
            
            public bool IsisoNull() {
                return this.IsNull(this.tableexif.isoColumn);
            }
            
            public void SetisoNull() {
                this[this.tableexif.isoColumn] = System.Convert.DBNull;
            }
            
            public bool Isfocal_lengthNull() {
                return this.IsNull(this.tableexif.focal_lengthColumn);
            }
            
            public void Setfocal_lengthNull() {
                this[this.tableexif.focal_lengthColumn] = System.Convert.DBNull;
            }
            
            public bool IsexpcompNull() {
                return this.IsNull(this.tableexif.expcompColumn);
            }
            
            public void SetexpcompNull() {
                this[this.tableexif.expcompColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class exifRowChangeEvent : EventArgs {
            
            private exifRow eventRow;
            
            private DataRowAction eventAction;
            
            public exifRowChangeEvent(exifRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public exifRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class folderDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnfolder_id;
            
            private DataColumn columnfriendly_id;
            
            private DataColumn columnname;
            
            private DataColumn columncaption;
            
            private DataColumn columnhighlight_id;
            
            private DataColumn columnsort_order;
            
            private DataColumn columncreated_date;
            
            private DataColumn columnsec_level;
            
            internal folderDataTable() : 
                    base("folder") {
                this.InitClass();
            }
            
            internal folderDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn folder_idColumn {
                get {
                    return this.columnfolder_id;
                }
            }
            
            internal DataColumn friendly_idColumn {
                get {
                    return this.columnfriendly_id;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn captionColumn {
                get {
                    return this.columncaption;
                }
            }
            
            internal DataColumn highlight_idColumn {
                get {
                    return this.columnhighlight_id;
                }
            }
            
            internal DataColumn sort_orderColumn {
                get {
                    return this.columnsort_order;
                }
            }
            
            internal DataColumn created_dateColumn {
                get {
                    return this.columncreated_date;
                }
            }
            
            internal DataColumn sec_levelColumn {
                get {
                    return this.columnsec_level;
                }
            }
            
            public folderRow this[int index] {
                get {
                    return ((folderRow)(this.Rows[index]));
                }
            }
            
            public event folderRowChangeEventHandler folderRowChanged;
            
            public event folderRowChangeEventHandler folderRowChanging;
            
            public event folderRowChangeEventHandler folderRowDeleted;
            
            public event folderRowChangeEventHandler folderRowDeleting;
            
            public void AddfolderRow(folderRow row) {
                this.Rows.Add(row);
            }
            
            public folderRow AddfolderRow(System.Guid folder_id, string name, string caption, System.Guid highlight_id, int sort_order, System.DateTime created_date, int sec_level) {
                folderRow rowfolderRow = ((folderRow)(this.NewRow()));
                rowfolderRow.ItemArray = new object[] {
                        folder_id,
                        null,
                        name,
                        caption,
                        highlight_id,
                        sort_order,
                        created_date,
                        sec_level};
                this.Rows.Add(rowfolderRow);
                return rowfolderRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                folderDataTable cln = ((folderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new folderDataTable();
            }
            
            internal void InitVars() {
                this.columnfolder_id = this.Columns["folder_id"];
                this.columnfriendly_id = this.Columns["friendly_id"];
                this.columnname = this.Columns["name"];
                this.columncaption = this.Columns["caption"];
                this.columnhighlight_id = this.Columns["highlight_id"];
                this.columnsort_order = this.Columns["sort_order"];
                this.columncreated_date = this.Columns["created_date"];
                this.columnsec_level = this.Columns["sec_level"];
            }
            
            private void InitClass() {
                this.columnfolder_id = new DataColumn("folder_id", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfolder_id);
                this.columnfriendly_id = new DataColumn("friendly_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfriendly_id);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnname);
                this.columncaption = new DataColumn("caption", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncaption);
                this.columnhighlight_id = new DataColumn("highlight_id", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnhighlight_id);
                this.columnsort_order = new DataColumn("sort_order", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsort_order);
                this.columncreated_date = new DataColumn("created_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncreated_date);
                this.columnsec_level = new DataColumn("sec_level", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsec_level);
                this.columnfolder_id.AllowDBNull = false;
                this.columnfriendly_id.AutoIncrement = true;
                this.columnfriendly_id.AllowDBNull = false;
                this.columnfriendly_id.ReadOnly = true;
                this.columnname.AllowDBNull = false;
                this.columncreated_date.AllowDBNull = false;
                this.columnsec_level.AllowDBNull = false;
            }
            
            public folderRow NewfolderRow() {
                return ((folderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new folderRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(folderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.folderRowChanged != null)) {
                    this.folderRowChanged(this, new folderRowChangeEvent(((folderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.folderRowChanging != null)) {
                    this.folderRowChanging(this, new folderRowChangeEvent(((folderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.folderRowDeleted != null)) {
                    this.folderRowDeleted(this, new folderRowChangeEvent(((folderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.folderRowDeleting != null)) {
                    this.folderRowDeleting(this, new folderRowChangeEvent(((folderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovefolderRow(folderRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class folderRow : DataRow {
            
            private folderDataTable tablefolder;
            
            internal folderRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablefolder = ((folderDataTable)(this.Table));
            }
            
            public System.Guid folder_id {
                get {
                    return ((System.Guid)(this[this.tablefolder.folder_idColumn]));
                }
                set {
                    this[this.tablefolder.folder_idColumn] = value;
                }
            }
            
            public int friendly_id {
                get {
                    return ((int)(this[this.tablefolder.friendly_idColumn]));
                }
                set {
                    this[this.tablefolder.friendly_idColumn] = value;
                }
            }
            
            public string name {
                get {
                    return ((string)(this[this.tablefolder.nameColumn]));
                }
                set {
                    this[this.tablefolder.nameColumn] = value;
                }
            }
            
            public string caption {
                get {
                    try {
                        return ((string)(this[this.tablefolder.captionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefolder.captionColumn] = value;
                }
            }
            
            public System.Guid highlight_id {
                get {
                    try {
                        return ((System.Guid)(this[this.tablefolder.highlight_idColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefolder.highlight_idColumn] = value;
                }
            }
            
            public int sort_order {
                get {
                    try {
                        return ((int)(this[this.tablefolder.sort_orderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefolder.sort_orderColumn] = value;
                }
            }
            
            public System.DateTime created_date {
                get {
                    return ((System.DateTime)(this[this.tablefolder.created_dateColumn]));
                }
                set {
                    this[this.tablefolder.created_dateColumn] = value;
                }
            }
            
            public int sec_level {
                get {
                    return ((int)(this[this.tablefolder.sec_levelColumn]));
                }
                set {
                    this[this.tablefolder.sec_levelColumn] = value;
                }
            }
            
            public bool IscaptionNull() {
                return this.IsNull(this.tablefolder.captionColumn);
            }
            
            public void SetcaptionNull() {
                this[this.tablefolder.captionColumn] = System.Convert.DBNull;
            }
            
            public bool Ishighlight_idNull() {
                return this.IsNull(this.tablefolder.highlight_idColumn);
            }
            
            public void Sethighlight_idNull() {
                this[this.tablefolder.highlight_idColumn] = System.Convert.DBNull;
            }
            
            public bool Issort_orderNull() {
                return this.IsNull(this.tablefolder.sort_orderColumn);
            }
            
            public void Setsort_orderNull() {
                this[this.tablefolder.sort_orderColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class folderRowChangeEvent : EventArgs {
            
            private folderRow eventRow;
            
            private DataRowAction eventAction;
            
            public folderRowChangeEvent(folderRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public folderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class photoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnphoto_id;
            
            private DataColumn columnfriendly_id;
            
            private DataColumn columncaption;
            
            private DataColumn columnfolder_id;
            
            private DataColumn columncreated_date;
            
            private DataColumn columnsec_level;
            
            internal photoDataTable() : 
                    base("photo") {
                this.InitClass();
            }
            
            internal photoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn photo_idColumn {
                get {
                    return this.columnphoto_id;
                }
            }
            
            internal DataColumn friendly_idColumn {
                get {
                    return this.columnfriendly_id;
                }
            }
            
            internal DataColumn captionColumn {
                get {
                    return this.columncaption;
                }
            }
            
            internal DataColumn folder_idColumn {
                get {
                    return this.columnfolder_id;
                }
            }
            
            internal DataColumn created_dateColumn {
                get {
                    return this.columncreated_date;
                }
            }
            
            internal DataColumn sec_levelColumn {
                get {
                    return this.columnsec_level;
                }
            }
            
            public photoRow this[int index] {
                get {
                    return ((photoRow)(this.Rows[index]));
                }
            }
            
            public event photoRowChangeEventHandler photoRowChanged;
            
            public event photoRowChangeEventHandler photoRowChanging;
            
            public event photoRowChangeEventHandler photoRowDeleted;
            
            public event photoRowChangeEventHandler photoRowDeleting;
            
            public void AddphotoRow(photoRow row) {
                this.Rows.Add(row);
            }
            
            public photoRow AddphotoRow(System.Guid photo_id, string caption, System.Guid folder_id, System.DateTime created_date, int sec_level) {
                photoRow rowphotoRow = ((photoRow)(this.NewRow()));
                rowphotoRow.ItemArray = new object[] {
                        photo_id,
                        null,
                        caption,
                        folder_id,
                        created_date,
                        sec_level};
                this.Rows.Add(rowphotoRow);
                return rowphotoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                photoDataTable cln = ((photoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new photoDataTable();
            }
            
            internal void InitVars() {
                this.columnphoto_id = this.Columns["photo_id"];
                this.columnfriendly_id = this.Columns["friendly_id"];
                this.columncaption = this.Columns["caption"];
                this.columnfolder_id = this.Columns["folder_id"];
                this.columncreated_date = this.Columns["created_date"];
                this.columnsec_level = this.Columns["sec_level"];
            }
            
            private void InitClass() {
                this.columnphoto_id = new DataColumn("photo_id", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnphoto_id);
                this.columnfriendly_id = new DataColumn("friendly_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfriendly_id);
                this.columncaption = new DataColumn("caption", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncaption);
                this.columnfolder_id = new DataColumn("folder_id", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfolder_id);
                this.columncreated_date = new DataColumn("created_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncreated_date);
                this.columnsec_level = new DataColumn("sec_level", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsec_level);
                this.columnphoto_id.AllowDBNull = false;
                this.columnfriendly_id.AutoIncrement = true;
                this.columnfriendly_id.AllowDBNull = false;
                this.columnfriendly_id.ReadOnly = true;
                this.columnfolder_id.AllowDBNull = false;
                this.columncreated_date.AllowDBNull = false;
                this.columnsec_level.AllowDBNull = false;
            }
            
            public photoRow NewphotoRow() {
                return ((photoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new photoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(photoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.photoRowChanged != null)) {
                    this.photoRowChanged(this, new photoRowChangeEvent(((photoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.photoRowChanging != null)) {
                    this.photoRowChanging(this, new photoRowChangeEvent(((photoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.photoRowDeleted != null)) {
                    this.photoRowDeleted(this, new photoRowChangeEvent(((photoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.photoRowDeleting != null)) {
                    this.photoRowDeleting(this, new photoRowChangeEvent(((photoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovephotoRow(photoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class photoRow : DataRow {
            
            private photoDataTable tablephoto;
            
            internal photoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablephoto = ((photoDataTable)(this.Table));
            }
            
            public System.Guid photo_id {
                get {
                    return ((System.Guid)(this[this.tablephoto.photo_idColumn]));
                }
                set {
                    this[this.tablephoto.photo_idColumn] = value;
                }
            }
            
            public int friendly_id {
                get {
                    return ((int)(this[this.tablephoto.friendly_idColumn]));
                }
                set {
                    this[this.tablephoto.friendly_idColumn] = value;
                }
            }
            
            public string caption {
                get {
                    try {
                        return ((string)(this[this.tablephoto.captionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablephoto.captionColumn] = value;
                }
            }
            
            public System.Guid folder_id {
                get {
                    return ((System.Guid)(this[this.tablephoto.folder_idColumn]));
                }
                set {
                    this[this.tablephoto.folder_idColumn] = value;
                }
            }
            
            public System.DateTime created_date {
                get {
                    return ((System.DateTime)(this[this.tablephoto.created_dateColumn]));
                }
                set {
                    this[this.tablephoto.created_dateColumn] = value;
                }
            }
            
            public int sec_level {
                get {
                    return ((int)(this[this.tablephoto.sec_levelColumn]));
                }
                set {
                    this[this.tablephoto.sec_levelColumn] = value;
                }
            }
            
            public bool IscaptionNull() {
                return this.IsNull(this.tablephoto.captionColumn);
            }
            
            public void SetcaptionNull() {
                this[this.tablephoto.captionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class photoRowChangeEvent : EventArgs {
            
            private photoRow eventRow;
            
            private DataRowAction eventAction;
            
            public photoRowChangeEvent(photoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public photoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class instanceDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columninstance_id;
            
            private DataColumn columnphoto_id;
            
            private DataColumn columnwidth;
            
            private DataColumn columnheight;
            
            internal instanceDataTable() : 
                    base("instance") {
                this.InitClass();
            }
            
            internal instanceDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn instance_idColumn {
                get {
                    return this.columninstance_id;
                }
            }
            
            internal DataColumn photo_idColumn {
                get {
                    return this.columnphoto_id;
                }
            }
            
            internal DataColumn widthColumn {
                get {
                    return this.columnwidth;
                }
            }
            
            internal DataColumn heightColumn {
                get {
                    return this.columnheight;
                }
            }
            
            public instanceRow this[int index] {
                get {
                    return ((instanceRow)(this.Rows[index]));
                }
            }
            
            public event instanceRowChangeEventHandler instanceRowChanged;
            
            public event instanceRowChangeEventHandler instanceRowChanging;
            
            public event instanceRowChangeEventHandler instanceRowDeleted;
            
            public event instanceRowChangeEventHandler instanceRowDeleting;
            
            public void AddinstanceRow(instanceRow row) {
                this.Rows.Add(row);
            }
            
            public instanceRow AddinstanceRow(System.Guid instance_id, System.Guid photo_id, int width, int height) {
                instanceRow rowinstanceRow = ((instanceRow)(this.NewRow()));
                rowinstanceRow.ItemArray = new object[] {
                        instance_id,
                        photo_id,
                        width,
                        height};
                this.Rows.Add(rowinstanceRow);
                return rowinstanceRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                instanceDataTable cln = ((instanceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new instanceDataTable();
            }
            
            internal void InitVars() {
                this.columninstance_id = this.Columns["instance_id"];
                this.columnphoto_id = this.Columns["photo_id"];
                this.columnwidth = this.Columns["width"];
                this.columnheight = this.Columns["height"];
            }
            
            private void InitClass() {
                this.columninstance_id = new DataColumn("instance_id", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columninstance_id);
                this.columnphoto_id = new DataColumn("photo_id", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnphoto_id);
                this.columnwidth = new DataColumn("width", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnwidth);
                this.columnheight = new DataColumn("height", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnheight);
                this.columninstance_id.AllowDBNull = false;
                this.columnphoto_id.AllowDBNull = false;
            }
            
            public instanceRow NewinstanceRow() {
                return ((instanceRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new instanceRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(instanceRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.instanceRowChanged != null)) {
                    this.instanceRowChanged(this, new instanceRowChangeEvent(((instanceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.instanceRowChanging != null)) {
                    this.instanceRowChanging(this, new instanceRowChangeEvent(((instanceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.instanceRowDeleted != null)) {
                    this.instanceRowDeleted(this, new instanceRowChangeEvent(((instanceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.instanceRowDeleting != null)) {
                    this.instanceRowDeleting(this, new instanceRowChangeEvent(((instanceRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveinstanceRow(instanceRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class instanceRow : DataRow {
            
            private instanceDataTable tableinstance;
            
            internal instanceRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableinstance = ((instanceDataTable)(this.Table));
            }
            
            public System.Guid instance_id {
                get {
                    return ((System.Guid)(this[this.tableinstance.instance_idColumn]));
                }
                set {
                    this[this.tableinstance.instance_idColumn] = value;
                }
            }
            
            public System.Guid photo_id {
                get {
                    return ((System.Guid)(this[this.tableinstance.photo_idColumn]));
                }
                set {
                    this[this.tableinstance.photo_idColumn] = value;
                }
            }
            
            public int width {
                get {
                    try {
                        return ((int)(this[this.tableinstance.widthColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinstance.widthColumn] = value;
                }
            }
            
            public int height {
                get {
                    try {
                        return ((int)(this[this.tableinstance.heightColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinstance.heightColumn] = value;
                }
            }
            
            public bool IswidthNull() {
                return this.IsNull(this.tableinstance.widthColumn);
            }
            
            public void SetwidthNull() {
                this[this.tableinstance.widthColumn] = System.Convert.DBNull;
            }
            
            public bool IsheightNull() {
                return this.IsNull(this.tableinstance.heightColumn);
            }
            
            public void SetheightNull() {
                this[this.tableinstance.heightColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class instanceRowChangeEvent : EventArgs {
            
            private instanceRow eventRow;
            
            private DataRowAction eventAction;
            
            public instanceRowChangeEvent(instanceRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public instanceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class userDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnuser_id;
            
            private DataColumn columnname;
            
            private DataColumn columnsec_level;
            
            private DataColumn columnlogin;
            
            private DataColumn columnpassword;
            
            internal userDataTable() : 
                    base("user") {
                this.InitClass();
            }
            
            internal userDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn user_idColumn {
                get {
                    return this.columnuser_id;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn sec_levelColumn {
                get {
                    return this.columnsec_level;
                }
            }
            
            internal DataColumn loginColumn {
                get {
                    return this.columnlogin;
                }
            }
            
            internal DataColumn passwordColumn {
                get {
                    return this.columnpassword;
                }
            }
            
            public userRow this[int index] {
                get {
                    return ((userRow)(this.Rows[index]));
                }
            }
            
            public event userRowChangeEventHandler userRowChanged;
            
            public event userRowChangeEventHandler userRowChanging;
            
            public event userRowChangeEventHandler userRowDeleted;
            
            public event userRowChangeEventHandler userRowDeleting;
            
            public void AdduserRow(userRow row) {
                this.Rows.Add(row);
            }
            
            public userRow AdduserRow(string user_id, string name, int sec_level, string login, System.Byte[] password) {
                userRow rowuserRow = ((userRow)(this.NewRow()));
                rowuserRow.ItemArray = new object[] {
                        user_id,
                        name,
                        sec_level,
                        login,
                        password};
                this.Rows.Add(rowuserRow);
                return rowuserRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                userDataTable cln = ((userDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new userDataTable();
            }
            
            internal void InitVars() {
                this.columnuser_id = this.Columns["user_id"];
                this.columnname = this.Columns["name"];
                this.columnsec_level = this.Columns["sec_level"];
                this.columnlogin = this.Columns["login"];
                this.columnpassword = this.Columns["password"];
            }
            
            private void InitClass() {
                this.columnuser_id = new DataColumn("user_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuser_id);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnname);
                this.columnsec_level = new DataColumn("sec_level", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsec_level);
                this.columnlogin = new DataColumn("login", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlogin);
                this.columnpassword = new DataColumn("password", typeof(System.Byte[]), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpassword);
                this.columnuser_id.AllowDBNull = false;
                this.columnname.AllowDBNull = false;
                this.columnsec_level.AllowDBNull = false;
                this.columnlogin.AllowDBNull = false;
                this.columnpassword.AllowDBNull = false;
            }
            
            public userRow NewuserRow() {
                return ((userRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new userRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(userRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.userRowChanged != null)) {
                    this.userRowChanged(this, new userRowChangeEvent(((userRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.userRowChanging != null)) {
                    this.userRowChanging(this, new userRowChangeEvent(((userRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.userRowDeleted != null)) {
                    this.userRowDeleted(this, new userRowChangeEvent(((userRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.userRowDeleting != null)) {
                    this.userRowDeleting(this, new userRowChangeEvent(((userRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveuserRow(userRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class userRow : DataRow {
            
            private userDataTable tableuser;
            
            internal userRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableuser = ((userDataTable)(this.Table));
            }
            
            public string user_id {
                get {
                    return ((string)(this[this.tableuser.user_idColumn]));
                }
                set {
                    this[this.tableuser.user_idColumn] = value;
                }
            }
            
            public string name {
                get {
                    return ((string)(this[this.tableuser.nameColumn]));
                }
                set {
                    this[this.tableuser.nameColumn] = value;
                }
            }
            
            public int sec_level {
                get {
                    return ((int)(this[this.tableuser.sec_levelColumn]));
                }
                set {
                    this[this.tableuser.sec_levelColumn] = value;
                }
            }
            
            public string login {
                get {
                    return ((string)(this[this.tableuser.loginColumn]));
                }
                set {
                    this[this.tableuser.loginColumn] = value;
                }
            }
            
            public System.Byte[] password {
                get {
                    return ((System.Byte[])(this[this.tableuser.passwordColumn]));
                }
                set {
                    this[this.tableuser.passwordColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class userRowChangeEvent : EventArgs {
            
            private userRow eventRow;
            
            private DataRowAction eventAction;
            
            public userRowChangeEvent(userRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public userRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class sessionDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnsession_id;
            
            private DataColumn columnuser_id;
            
            private DataColumn columnlast_seen;
            
            internal sessionDataTable() : 
                    base("session") {
                this.InitClass();
            }
            
            internal sessionDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn session_idColumn {
                get {
                    return this.columnsession_id;
                }
            }
            
            internal DataColumn user_idColumn {
                get {
                    return this.columnuser_id;
                }
            }
            
            internal DataColumn last_seenColumn {
                get {
                    return this.columnlast_seen;
                }
            }
            
            public sessionRow this[int index] {
                get {
                    return ((sessionRow)(this.Rows[index]));
                }
            }
            
            public event sessionRowChangeEventHandler sessionRowChanged;
            
            public event sessionRowChangeEventHandler sessionRowChanging;
            
            public event sessionRowChangeEventHandler sessionRowDeleted;
            
            public event sessionRowChangeEventHandler sessionRowDeleting;
            
            public void AddsessionRow(sessionRow row) {
                this.Rows.Add(row);
            }
            
            public sessionRow AddsessionRow(string session_id, string user_id, System.DateTime last_seen) {
                sessionRow rowsessionRow = ((sessionRow)(this.NewRow()));
                rowsessionRow.ItemArray = new object[] {
                        session_id,
                        user_id,
                        last_seen};
                this.Rows.Add(rowsessionRow);
                return rowsessionRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                sessionDataTable cln = ((sessionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new sessionDataTable();
            }
            
            internal void InitVars() {
                this.columnsession_id = this.Columns["session_id"];
                this.columnuser_id = this.Columns["user_id"];
                this.columnlast_seen = this.Columns["last_seen"];
            }
            
            private void InitClass() {
                this.columnsession_id = new DataColumn("session_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsession_id);
                this.columnuser_id = new DataColumn("user_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuser_id);
                this.columnlast_seen = new DataColumn("last_seen", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlast_seen);
                this.columnsession_id.AllowDBNull = false;
                this.columnuser_id.AllowDBNull = false;
                this.columnlast_seen.AllowDBNull = false;
            }
            
            public sessionRow NewsessionRow() {
                return ((sessionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new sessionRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(sessionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sessionRowChanged != null)) {
                    this.sessionRowChanged(this, new sessionRowChangeEvent(((sessionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sessionRowChanging != null)) {
                    this.sessionRowChanging(this, new sessionRowChangeEvent(((sessionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sessionRowDeleted != null)) {
                    this.sessionRowDeleted(this, new sessionRowChangeEvent(((sessionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sessionRowDeleting != null)) {
                    this.sessionRowDeleting(this, new sessionRowChangeEvent(((sessionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovesessionRow(sessionRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class sessionRow : DataRow {
            
            private sessionDataTable tablesession;
            
            internal sessionRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablesession = ((sessionDataTable)(this.Table));
            }
            
            public string session_id {
                get {
                    return ((string)(this[this.tablesession.session_idColumn]));
                }
                set {
                    this[this.tablesession.session_idColumn] = value;
                }
            }
            
            public string user_id {
                get {
                    return ((string)(this[this.tablesession.user_idColumn]));
                }
                set {
                    this[this.tablesession.user_idColumn] = value;
                }
            }
            
            public System.DateTime last_seen {
                get {
                    return ((System.DateTime)(this[this.tablesession.last_seenColumn]));
                }
                set {
                    this[this.tablesession.last_seenColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class sessionRowChangeEvent : EventArgs {
            
            private sessionRow eventRow;
            
            private DataRowAction eventAction;
            
            public sessionRowChangeEvent(sessionRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public sessionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
